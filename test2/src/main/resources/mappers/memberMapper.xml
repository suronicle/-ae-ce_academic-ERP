<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.dong.memberMapper">

	<!-- 가입 -->
	<insert id="join" parameterType="MemberDTO">
		INSERT INTO user(userId,
		userName, userPwd, userMobile, userAdmin, userEmail)
		VALUES (#{userId},
		#{userName}, #{userPwd}, #{userMobile}, #{userAdmin},
		#{userEmail});
	</insert>


	<!-- 로그인 처리를 위한 SQL -->
	<select id="login" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT userId, userName, userAdmin, pName
		FROM user,
		codetable
		WHERE user.userAdmin = codetable.pId
		And userId = #{userId}
		AND userPwd = #{userPwd}
		AND userAdminConfirm = "101"
	</select>

	<!-- 로그인 처리후 아이디를 얻기 위한 SQL -->
	<select id="loginId" parameterType="java.util.Map"
		resultType="java.lang.String">
		SELECT userId
		codetable
		WHERE user.userAdmin = codetable.pId
		And userId = #{userId}
		AND userPwd = #{userPwd}
		AND userAdminConfirm =
		"101"
	</select>

	<!-- 아이디로 불러오는 모든 정보 -->
	<select id="userInfo" parameterType="java.lang.String"
		resultType="MemberDTO">
		select *
		from user, codetable , attendcount
		where
		user.userAdmin=codetable.pId
		and attendcount.acId=user.userId
		and userId=#{userId}

	</select>



	<!-- 직책 -->
	<select id="getAdmin" parameterType="java.util.Map"
		resultType="java.lang.String">
		SELECT pName
		FROM user, codetable
		WHERE user.userAdmin =
		codetable.pId
		And userId = #{userId}
		AND userPwd = #{userPwd}
		AND
		userAdminConfirm = "101"
	</select>

	<!-- 출근 -->
	<insert id="tGo" parameterType="java.lang.String">
		INSERT INTO
		attendance(aId,aDate,aAttend)
		values(#{userId}, now(), 7)
	</insert>


	<!-- 퇴근 -->
	<insert id="tOut" parameterType="java.lang.String">
		INSERT INTO
		attendance(aId,aDate,aAttend)
		values(#{userId}, now(), 8)
	</insert>

	<!-- 출근 정보 -->
	<select id="tGoInfo" parameterType="MemberDTO"
		resultType="MemberDTO">
		select *
		from attendance
		where aId=#{userId} AND aDate LIKE
		CONCAT(#{aDate}, '%') AND aAttend=7
	</select>

	<!-- 퇴근 정보 -->
	<select id="tOutInfo" parameterType="MemberDTO"
		resultType="MemberDTO">
		select *
		from attendance
		where aId=#{userId} AND aDate LIKE
		CONCAT(#{aDate}, '%') AND aAttend=8
	</select>

	<!-- 출근 이미 했는지 확인 -->
	<select id="tGoCheck" parameterType="MemberDTO"
		resultType="java.lang.Integer">
		select count(*)
		from attendance
		WHERE aId = #{userId} AND
		aDate LIKE CONCAT(#{aDate}, '%')
		AND aAttend in(7,8)
	</select>


	<!-- 비밀번호 찾기 -->
	<select id="findPass" parameterType="java.util.Map"
		resultType="java.util.Map">
		select userName, userPwd, userId
		from user
		where
		userId=#{userId} AND userEmail=#{userEmail}
	</select>

	<!-- 비밀번호 변경 -->
	<update id="changePass" parameterType="MemberDTO">
		update user
		set
		userPwd=#{userPwd}
		where userId=#{userId}
	</update>

	<!-- 전화번호 변경 -->
	<update id="changeMob" parameterType="MemberDTO">
		update user
		set
		userMobile=#{userMobile}
		where userId=#{userId}
	</update>




	<!-- 아이디 중복체크 -->
	<select id="idCheck" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		select count(*)
		from user
		where userId = #{userId}
	</select>

	<!-- 이메일 중복체크 -->
	<select id="emailCheck" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		select count(*)
		from user
		where userEmail = #{userEmail}
	</select>



	<!-- 미승인, 반려 아이디 -->
	<select id="managerConfirm" resultType="MemberDTO">
		select userId, userName,
		pName
		from user, codetable
		where user.userAdminConfirm = codetable.pId
		AND userAdminConfirm != "101"
	</select>


	<!-- 직책 가져오기 -->
	<select id="role" parameterType="java.lang.String"
		resultType="java.lang.String">
		select pName
		from codetable
		where commId="adminId"
		AND
		pId=(select userAdmin
		from user
		where userId=#{userId})
	</select>

	<!-- 승인여부 가져오기 -->
	<select id="confirmName" parameterType="java.lang.String"
		resultType="java.lang.String">
		select pName
		from codetable
		where commId="confirmId"
		AND
		pId=(select userAdmin
		from user
		where userId=#{userId})
	</select>


	<!-- 연차 반차 승인 개수 -->

	<!-- 승인 개수 -->
	<select id="cCount" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		select count(*)
		from attendance
		where aId=#{userId} AND
		aConfirm="101"
	</select>

	<!-- 연차 반차 미승인 개수 -->

	<!-- 미승인 개수 -->
	<select id="nCount" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		select count(*)
		from attendance
		where aId=#{userId} AND
		aConfirm="100"
	</select>




	<!-- 아이디 별 선택 -->
	<select id="confirmOne" parameterType="java.lang.String"
		resultType="MemberDTO">
		select *
		from user
		where userId=#{userId}
	</select>

	<!-- 가입 승인 -->
	<update id="confirm" parameterType="java.lang.String">
		UPDATE user
		SET
		userAdminConfirm = "101", userRefusal = NULL
		WHERE userId = #{userId}

	</update>

	<!-- 거절 사유 -->
	<update id="refusal" parameterType="MemberDTO">
		UPDATE user SET userRefusal =
		#{userRefusal}, userAdminConfirm="102"
		WHERE
		userId = #{userId}

	</update>


	<!-- attendCount등록 -->
	<insert id="tAttendCount" parameterType="java.lang.String">
		INSERT INTO attendcount
		(acId, ann, half) VALUES (#{userId}, 24, 48);
	</insert>

	<insert id="sAttendCount" parameterType="java.lang.String">
		INSERT INTO attendcount
		(acId) VALUES (#{userId});
	</insert>




	<!-- 공지사항 게시판 불러오기 -->
	<select id="boardList" resultType="BoardDTO">
		select boardNum, boardUserId,
		boardTitle, boardContent, boardDate, boardDel,
		boardCount, pName,
		boardId
		from board, codetable, user
		where board.boardUserId=user.userId
		AND user.userAdmin = codetable.pId
		AND boardId="203"
		AND boardDel=0
		order by boardNum
		desc
	</select>


	<!-- 출 퇴근 기록 가져오기 -->
	<select id="GoOutAll" parameterType="java.lang.String"
		resultType="MemberDTO">
		select *
		from attendance, attend
		where
		attendance.aAttend=attend.aNum
		AND aId=#{userId} AND aAttend in (7,8)
		order by aDate desc;


	</select>



	<!-- 메일ㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹ -->
	<select id="mailList" parameterType="java.lang.String"
		resultType="MemberDTO">
		select *
		from mail
		where receiveId=#{userId}
		AND mailDel=0
		order by mailNum
		desc;
	</select>


	<!-- 메일 삭제 리스트 -->
	<select id="mailDelList" parameterType="java.lang.String"
		resultType="MemberDTO">
		select *
		from mail
		where receiveId=#{userId}
		AND mailDel=1
		order by mailNum
		desc;
	</select>



	<!-- 안 읽은 메일 수 -->
	<select id="mailCount" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		select count(*)
		from mail
		where receiveId=#{userId}
		AND
		mailCount=0
		AND mailDel=0
	</select>

	<!-- mailNum 으로 메일 상세보기 -->
	<select id="mailSelect" parameterType="MemberDTO"
		resultType="MemberDTO">
		select *
		from mail, user
		where mail.sendId = user.userId
		AND
		receiveId=#{receiveId} and mailNum=#{mailNum}
	</select>

	<!-- 이메일, 이름, 직책 정보 -->
	<select id="emailAddress" parameterType="java.lang.String"
		resultType="MemberDTO">
		select userName, pName, userEmail,userId
		from user,
		codetable
		where
		user.userAdmin=codetable.pId
		AND userId != #{userId}
		and userAdminConfirm="101"
	</select>


	<!-- 이메일 쓰기 -->
	<insert id="emailRegister" parameterType="MemberDTO">
		INSERT INTO mail
		(sendId, receiveId, mailTitle, mailContent, mailDate)
		VALUES
		(#{userId}, #{receiveId}, #{mailTitle}, #{mailContent}, now())
	</insert>

	<!-- 메일 읽음 -->
	<update id="updateMail" parameterType="java.lang.Integer">
		UPDATE mail
		SET mailCount =
		1
		WHERE mailNum = #{mailNum}
	</update>


	<!-- 메일 발신함 -->
	<select id="sendMail" parameterType="java.lang.String"
		resultType="MemberDTO">
		select *
		from mail
		where sendId=#{userId}

		order by mailNum
		desc
	</select>


	<!-- 메일용 유저 정보 -->
	<select id="mailUserInfo" parameterType="java.lang.String"
		resultType="MemberDTO">
		select *
		from user, codetable
		where
		user.userAdmin =
		codetable.pId
		AND userId=#{receiveId}
		
	</select>

	<!-- 메일 삭제하기 -->
	<update id="mailDelete" parameterType="java.lang.Integer">
		UPDATE mail
		SET mailDel = 1
		WHERE mailNum= #{mailNum}

	</update>




	<!-- ========학생======== -->




	<!-- 출석 카운트 -->
	<select id="att" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		select att
		from attendcount
		where acId
		= #{userId}
	</select>

	<!-- 지각 카운트 -->
	<select id="late" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		select late
		from attendcount
		where
		acId = #{userId}
	</select>

	<!-- 조퇴 카운트 -->
	<select id="ealry" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		select early
		from attendcount
		where
		acId = #{userId}
	</select>

	<!-- 결석 카운트 -->
	<select id="abs" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		select abs
		from attendcount
		where acId
		= #{userId}
	</select>

	<!-- 출석+1 -->
	<update id="attPl" parameterType="java.lang.String">
		update attendcount set att =
		att+1 where acId = #{userId}

	</update>

	<!-- 지각+1 -->
	<update id="latePl" parameterType="java.lang.String">
		update attendcount set late =
		late+1 where acId = #{userId}

	</update>

	<!-- 조퇴+1 -->
	<update id="ealryPl" parameterType="java.lang.String">
		update attendcount set early
		= early+1 where acId = #{userId}

	</update>

	<!-- 결석+1 -->
	<update id="absPl" parameterType="java.lang.String">
		update attendcount set abs =
		abs+1 where acId = #{userId}

	</update>

	<!-- 지각+조퇴 수 -->
	<select id="latePlEalry" parameterType="java.lang.String" resultType="java.lang.Integer">
		select late+ealry
		from attendcount
		where acId = #{userId}
	</select>	

	<!-- mainAttend -->
	<select id="mainAttend" resultType="MemberDTO">
		select *
		from attend
		inner join
		attendance on aNum = aAttend
		inner join user on aId = #{userId}
		and
		userId = aId
		inner join attendCount on acId = userId
		join codetable
		on
		pId = aConfirm
		order by aDate desc;
	</select>

	<!-- regiAttend -->
	<insert id="regiAttend" parameterType="MemberDTO">
		insert into
		attendance(aId,aDate,aAttend,aConfirm,aLecNum) values
		(#{userId},now(),#{aAttend},'100',#{lectureNum})
	</insert>

	<!-- dateCount -->
	<select id="dateCount" parameterType="MemberDTO"
		resultType="java.lang.Integer">
		select count(*)
		from attendance
		where aDate like
		concat(#{aDate},'%') and aId = #{userId} and aLecNum = #{lectureNum }
	</select>

	<!-- 과목 조회 -->
	<select id="lectureInfo" parameterType="java.lang.String"
		resultType="MemberDTO">
		select *
		from lecture
		inner join userLecture on lectureNum = ulNum 
		and uId = #{userId}

	</select>



</mapper>